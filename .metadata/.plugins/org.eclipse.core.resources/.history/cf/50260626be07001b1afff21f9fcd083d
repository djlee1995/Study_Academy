import java.awt.*;
import javax.swing.*;

public class Calculator implements ActionListener {
	JTextField text;
	JButton btn[];

	public Calculator(JTextField text, JButton btn[]) {
		// TODO Auto-generated constructor stub
		this.text = text;
		this.btn = btn;

	}

	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		if (e.getActionCommand().equals("0")) {
			text.setText(text.getText() + "0");
		} else if (e.getActionCommand().equals("1")) {
			text.setText(text.getText() + "1");
		} else if (e.getActionCommand().equals("2")) {
			text.setText(text.getText() + "2");
		} else if (e.getActionCommand().equals("3")) {
			text.setText(text.getText() + "3");
		} else if (e.getActionCommand().equals("4")) {
			text.setText(text.getText() + "4");
		} else if (e.getActionCommand().equals("5")) {
			text.setText(text.getText() + "5");
		} else if (e.getActionCommand().equals("6")) {
			text.setText(text.getText() + "6");
		} else if (e.getActionCommand().equals("7")) {
			text.setText(text.getText() + "7");
		} else if (e.getActionCommand().equals("8")) {
			text.setText(text.getText() + "8");
		} else if (e.getActionCommand().equals("9")) {
			text.setText(text.getText() + "9");
		} else if (e.getActionCommand().equals("+")) {
			text.setText(text.getText() + "+");
		} else if (e.getActionCommand().equals("-")) {
			text.setText(text.getText() + "-");
		} else if (e.getActionCommand().equals("*")) {
			text.setText(text.getText() + "*");
		} else if (e.getActionCommand().equals("/")) {
			text.setText(text.getText() + "/");
		} else if (e.getActionCommand().equals("Clear")) {
			text.setText("");
		} else if (e.getActionCommand().equals("=")) {
			Calcul();
		} else {
			text.setText(text.getText().substring(0, text.getText().length() - 1));
		}

	}

	void Calcul() {
		String str = text.getText();
		StringTokenizer token = new StringTokenizer(str, "+-*/",true);

		String token_str = token.nextToken();
		if (input_check(token_str)) {
			JOptionPane.showMessageDialog(null, "수식입력오류-1~!!");// 연산자로 수식이 끝나는 경우
			return;
		}
		int result = Integer.parseInt(token_str);
		while (token.hasMoreTokens()) {// 토큰이 없을때까지 반복
			token_str = token.nextToken();// 짝수번째 토큰을 읽음(연산자)
			char ch = token_str.charAt(0);// 문자열에서 연산자 추출
			if (token.hasMoreTokens()) {
				token_str = token.nextToken();// 홀수번째 토큰을 읽음(숫자)
			} else {
				JOptionPane.showMessageDialog(null, "수식입력오류-2~!!");// 연산자로 수식이 끝나는 경우
				return;
			}
			if (input_check(token_str)) {// input_check() 톸ㄴ이 숫자인지 검사
				JOptionPane.showMessageDialog(null, "수식입력오류-3~!!");// 연산자로 수식이 끝나는 경우
				return;
			}
			switch (ch) {

			case '+':
				result += Integer.parseInt(token_str);
				break;
			case '-':
				result -= Integer.parseInt(token_str);
				break;
			case '*':
				result *= Integer.parseInt(token_str);
				break;
			case '/':
				result /= Integer.parseInt(token_str);
				break;

			}// switch
		} // while (token.hasMoreTokens())

		text.setText(text.getText() + "=" + result);

	}

	boolean input_check(String str) {
		char ch;
		for (int i = 0; i < str.length(); i++) { // 토큰을 ㅈ전달받아 문자열 길이만큼 한문자씩 검사
			ch = str.charAt(i); // 문자열에서 한문자씩 추출

			if (ch < '0' || ch > '9')// ch가 숫자인지 검사 유니코드로 비교
				return true;
		}
		return false;
	}

}
